const TelegramBot = require('node-telegram-bot-api');

const token = '7983929468:AAFztqDgG9ABDBBaM7b0e59m7NMDu4axwMk'; // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
const bot = new TelegramBot(token, { polling: true });

const CHANNELS = ['TESTONEDAS', 'TESTBOSSSA']; // –î–≤–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
const REWARD_BOT = 'https://t.me/STRANGETGJ_BOT?start=Premmbo';

const userData = new Map();
const userTimers = {}; // –¢–∞–π–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ' },
]);

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    userData.set(chatId, { subscribed: false, received: false });
    await sendInitialMessage(chatId);
    scheduleReminders(chatId);
});

async function sendInitialMessage(chatId) {
    const inlineKeyboard = {
        inline_keyboard: [
            [
                {
                    text: '‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1',
                    url: `https://t.me/${CHANNELS[0]}`,
                },
            ],
            [
                {
                    text: '‚úîÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 2',
                    url: `https://t.me/${CHANNELS[1]}`,
                },
            ],
            [
                {
                    text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                    callback_data: `check_sub_${chatId}`,
                },
            ],
            [
                {
                    text: 'üì© –ü–æ–ª—É—á–∏—Ç—å',
                    callback_data: `get_reward_${chatId}`,
                    disabled: true,
                },
            ],
            [
                {
                    text: '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ',
                    callback_data: `done_${chatId}`,
                    disabled: true,
                },
            ],
        ],
    };
    await bot.sendMessage(
        chatId,
        'üëá –∑–∞–±–µ—Ä–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–± –Ω–∞ 10000 —Ä—É–±–ª–µ–π ',
        { reply_markup: inlineKeyboard }
    );
}

function scheduleReminders(chatId) {
    const delays = [
        2 * 60 * 1000,
        5 * 60 * 1000,
        30 * 60 * 1000,
        60 * 60 * 1000,
        12 * 60 * 60 * 1000,
    ];
    let index = 0;
    function sendNextReminder() {
        if (userData.get(chatId)?.received) return;
        sendInitialMessage(chatId);
        if (index < delays.length - 1) {
            index++;
            userTimers[chatId] = setTimeout(sendNextReminder, delays[index]);
        }
    }
    userTimers[chatId] = setTimeout(sendNextReminder, delays[index]);
}

async function checkUserSubscription(chatId) {
    try {
        const results = await Promise.all(
            CHANNELS.map((channel) => bot.getChatMember(`@${channel}`, chatId))
        );
        return results.every((member) =>
            ['member', 'administrator', 'creator'].includes(member.status)
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return false;
    }
}

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const user = userData.get(chatId) || {};

    if (query.data.startsWith('check_sub_')) {
        const isSubscribed = await checkUserSubscription(chatId);
        if (!isSubscribed) {
            return bot.answerCallbackQuery(query.id, {
                text: '‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞',
                show_alert: true,
            });
        }
        user.subscribed = true;
        userData.set(chatId, user);
        bot.answerCallbackQuery(query.id, {
            text: '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!',
            show_alert: true,
        });

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "üì© –ü–æ–ª—É—á–∏—Ç—å", –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        bot.editMessageReplyMarkup(
            {
                inline_keyboard: [
                    [
                        {
                            text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1',
                            url: `https://t.me/${CHANNELS[0]}`,
                        },
                    ],
                    [
                        {
                            text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 2',
                            url: `https://t.me/${CHANNELS[1]}`,
                        },
                    ],
                    [
                        {
                            text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                            callback_data: `check_sub_${chatId}`,
                        },
                    ],
                    [
                        {
                            text: 'üì© –ü–æ–ª—É—á–∏—Ç—å',
                            callback_data: `get_reward_${chatId}`,
                        },
                    ],
                    [
                        {
                            text: '‚úîÔ∏è –ì–æ—Ç–æ–≤–æ',
                            callback_data: `done_${chatId}`,
                            disabled: true,
                        },
                    ],
                ],
            },
            { chat_id: chatId, message_id: query.message.message_id }
        );
    }

    if (query.data.startsWith('get_reward_')) {
        if (!user.subscribed) {
            return bot.answerCallbackQuery(query.id, {
                text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏',
                show_alert: true,
            });
        }
        user.received = true;
        userData.set(chatId, user);
        bot.answerCallbackQuery(query.id);

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "‚úÖ –ì–æ—Ç–æ–≤–æ"
        bot.editMessageReplyMarkup(
            {
                inline_keyboard: [
                    [
                        {
                            text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 1',
                            url: `https://t.me/${CHANNELS[0]}`,
                        },
                    ],
                    [
                        {
                            text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª 2',
                            url: `https://t.me/${CHANNELS[1]}`,
                        },
                    ],
                    [
                        {
                            text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                            callback_data: `check_sub_${chatId}`,
                        },
                    ],
                    [{ text: 'üì© –ü–æ–ª—É—á–∏—Ç—å', url: REWARD_BOT }],
                    [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: `done_${chatId}` }],
                ],
            },
            { chat_id: chatId, message_id: query.message.message_id }
        );
    }

    if (query.data.startsWith('done_')) {
        if (!user.received) {
            return bot.answerCallbackQuery(query.id, {
                text: '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –ø–æ–ª—É—á–∏—Ç—å',
                show_alert: true,
            });
        }
        bot.answerCallbackQuery(query.id, { text: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!' });

        if (userTimers[chatId]) {
            clearTimeout(userTimers[chatId]);
            delete userTimers[chatId];
        }
    }
});

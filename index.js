const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');

dotenv.config();

const token = process.env.MYTOKENBOT;
const bot = new TelegramBot(token, {
    polling: {
        interval: 300,
        autoStart: true,
        params: { timeout: 10 },
    },
});

const REWARD_BOT = 'https://t.me/Stand2gold_special_for_all_bot?start=Welcome';
const ACTIVATIONS_FILE = path.join(__dirname, 'activations.txt');

const userData = new Map();
const userTimers = {};

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ' },
]);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–∞–∂–∞–ª /start`);

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        userData.set(chatId, { received: false });

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã
        if (userTimers[chatId]) {
            clearTimeout(userTimers[chatId]);
            delete userTimers[chatId];
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await sendInitialMessage(chatId);
        scheduleReminders(chatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:', error);
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendInitialMessage(chatId) {
    try {
        const inlineKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: '‚úîÔ∏è –ü–æ–ª—É—á–∏—Ç—å',
                        callback_data: `get_reward_${chatId}`,
                    },
                ],
            ],
        };
        await bot.sendMessage(chatId, 'üëá –ó–∞–±–µ—Ä–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç—É—Ç ', {
            reply_markup: inlineKeyboard,
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
function scheduleReminders(chatId) {
    const delays = [
        2 * 60 * 1000,
        5 * 60 * 1000,
        30 * 60 * 1000,
        60 * 60 * 1000,
        12 * 60 * 60 * 1000,
    ];
    let index = 0;

    function sendNextReminder() {
        if (userData.get(chatId)?.received) return;

        sendInitialMessage(chatId)
            .then(() => {
                if (index < delays.length - 1) {
                    index++;
                    userTimers[chatId] = setTimeout(
                        sendNextReminder,
                        delays[index]
                    );
                }
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
            });
    }

    userTimers[chatId] = setTimeout(sendNextReminder, delays[index]);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
function logActivation(chatId) {
    const timestamp = new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
    });
    const previousActivations = fs.existsSync(ACTIVATIONS_FILE)
        ? fs.readFileSync(ACTIVATIONS_FILE, 'utf8')
        : '';
    const isRepeat = previousActivations.includes(chatId.toString());
    const logEntry = `${chatId} | ${timestamp} ${isRepeat ? '(–ü–æ–≤—Ç–æ—Ä)' : ''}\n`;
    fs.appendFileSync(ACTIVATIONS_FILE, logEntry, 'utf8');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å"
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const user = userData.get(chatId) || {};

    if (query.data.startsWith('get_reward_')) {
        user.received = true;
        userData.set(chatId, user);
        bot.answerCallbackQuery(query.id);

        // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logActivation(chatId);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if (userTimers[chatId]) {
            clearTimeout(userTimers[chatId]);
            delete userTimers[chatId];
        }

        bot.editMessageReplyMarkup(
            {
                inline_keyboard: [[{ text: '‚úîÔ∏è –ü–æ–ª—É—á–∏—Ç—å', url: REWARD_BOT }]],
            },
            { chat_id: chatId, message_id: query.message.message_id }
        ).catch((error) => console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏:', error));
    }
});
